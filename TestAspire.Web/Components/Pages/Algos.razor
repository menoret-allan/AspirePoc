@page "/algos"
@using TestAspire.Web.Api
@using TestAspire.Web.DataTransferObjects
@attribute [StreamRendering(true)]
@attribute [OutputCache(Duration = 5)]

@rendermode InteractiveServer

@inject AlgoClient AlgoApi

<PageTitle>Algos</PageTitle>

<h1>Algos</h1>

<p>This component allow fetch algos which are available in the backend.</p>


<EditForm Model="@AlgoWrite"
          FormName="editDataset"
          OnValidSubmit="HandleSubmitAsync"
          enctype="multipart/form-data"
          Enhance>
    <div class="mb-3">
        <label for="name" class="form-label">Name:</label>
        <InputText id="name" @bind-Value="AlgoWrite.Name" class="form-control" />
    </div>
    <div class="mb-3">
        <label for="version" class="form-label">Version:</label>
        <InputText id="version" @bind-Value="AlgoWrite.Version" class="form-control" />
    </div>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>

@if (algos == null)
{
    <p><em>Page is loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Version</th>
                <th>Alive</th>
                <th>Delete</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var algo in algos)
            {
                <tr>
                    <td>@algo.name</td>
                    <td>@algo.version</td>
                    <td>@algo.isAlive</td>
                    <td>
                        <button class="btn btn-primary" onclick="@(() => Delete(algo.id))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Algo[]? algos;
    [SupplyParameterFromForm]
    private AlgoWrite AlgoWrite { get; set; } = new()
    {
        Name = "Algo name",
        Version = "X.X.X.X"
    };

    private async Task HandleSubmitAsync()
    {
        await AlgoApi.PostAsync(AlgoWrite);

        algos = await AlgoApi.GetAlgosAsync();
    }


    private void Delete(int id)
    {
        Task.Run(async () =>
            {
                await AlgoApi.DeleteAsync(id);

                algos = await AlgoApi.GetAlgosAsync();
            }
        );
    }

    protected override async Task OnInitializedAsync()
    {
        algos = await AlgoApi.GetAlgosAsync();
    }
}
